{
  "name": "User Login",
  "nodes": [
    {
      "parameters": {
        "path": "auth-login",
        "options": {}
      },
      "id": "webhook-login",
      "name": "Login Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [340, 240],
      "webhookId": "auth-login"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.email }}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{ $json.password }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [560, 240]
    },
    {
      "parameters": {
        "fileName": "/data/users.json",
        "options": {}
      },
      "id": "read-users",
      "name": "Read Users File",
      "type": "n8n-nodes-base.readFile",
      "typeVersion": 1,
      "position": [780, 160],
      "continueOnFail": true
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "users",
              "value": "={{ $json.data ? JSON.parse($json.data) : [] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "parse-users",
      "name": "Parse Users",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1000, 160]
    },
    {
      "parameters": {
        "jsCode": "// Authenticate user\nconst users = $input.first().json.users || [];\nconst loginData = $node[\"Login Webhook\"].json;\n\n// Hash the provided password\nconst hashedPassword = require('crypto').createHash('sha256').update(loginData.password).digest('hex');\n\n// Find user with matching email and password\nconst user = users.find(u => \n  u.email === loginData.email && \n  u.password === hashedPassword && \n  u.active === true\n);\n\nif (user) {\n  // Create safe user object (without password)\n  const safeUser = {\n    id: user.id,\n    name: user.name,\n    email: user.email,\n    role: user.role,\n    createdAt: user.createdAt\n  };\n  \n  return [{\n    json: {\n      success: true,\n      user: safeUser,\n      message: \"Login successful\"\n    }\n  }];\n} else {\n  return [{\n    json: {\n      success: false,\n      error: \"Invalid email or password\"\n    }\n  }];\n}"
      },
      "id": "authenticate-user",
      "name": "Authenticate User",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1220, 160]
    },
    {
      "parameters": {
        "values": {
          "boolean": [
            {
              "name": "success",
              "value": false
            }
          ],
          "string": [
            {
              "name": "error",
              "value": "Invalid input. Email and password are required."
            }
          ]
        },
        "options": {}
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [780, 320]
    }
  ],
  "connections": {
    "Login Webhook": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Read Users File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Users File": {
      "main": [
        [
          {
            "node": "Parse Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Users": {
      "main": [
        [
          {
            "node": "Authenticate User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
} 