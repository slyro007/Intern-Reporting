{
  "name": "Working Get Intern Logs Fixed",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "intern-logs-get-fixed",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [340, 240]
    },
    {
      "parameters": {
        "jsCode": "// Read log files for a specific intern\nconst fs = require('fs');\nconst path = require('path');\n\n// Get email from query parameters - fix the parameter access\nconst webhookData = $input.first().json;\nconsole.log('Webhook data received:', JSON.stringify(webhookData, null, 2));\n\n// Try different ways to get the email parameter\nlet internEmail = 'unknown';\nif (webhookData.query && webhookData.query.email) {\n  internEmail = webhookData.query.email;\n} else if (webhookData.email) {\n  internEmail = webhookData.email;\n} else if (webhookData.params && webhookData.params.email) {\n  internEmail = webhookData.params.email;\n}\n\nconsole.log('Searching for logs with email:', internEmail);\n\n// Read logs directory\nconst logsDir = '/data/logs';\nlet logs = [];\nlet errorMsg = null;\n\ntry {\n  if (!fs.existsSync(logsDir)) {\n    console.log('Logs directory does not exist:', logsDir);\n    errorMsg = 'Logs directory not found';\n  } else {\n    const files = fs.readdirSync(logsDir);\n    console.log(`Found ${files.length} files in logs directory:`, files);\n    \n    for (const file of files) {\n      if (file.endsWith('.json') && file !== '.gitkeep') {\n        try {\n          const filepath = path.join(logsDir, file);\n          const content = fs.readFileSync(filepath, 'utf8');\n          const logData = JSON.parse(content);\n          \n          console.log(`File ${file} - internEmail: ${logData.internEmail}`);\n          \n          // Filter by intern email\n          if (logData.internEmail === internEmail) {\n            logs.push(logData);\n            console.log(`âœ… Matched log from ${file}`);\n          }\n        } catch (err) {\n          console.error('Error reading file:', file, err.message);\n        }\n      }\n    }\n  }\n  \n  // Sort logs by date (newest first)\n  logs.sort((a, b) => new Date(b.date || b.savedAt) - new Date(a.date || a.savedAt));\n  \n  console.log(`Found ${logs.length} logs for ${internEmail}`);\n  \n} catch (error) {\n  console.error('Error reading logs:', error.message);\n  errorMsg = error.message;\n}\n\nreturn [{\n  json: {\n    status: errorMsg ? 'error' : 'success',\n    message: errorMsg || 'Logs retrieved successfully',\n    data: logs,\n    internEmail: internEmail,\n    count: logs.length,\n    debug: {\n      logsDir: logsDir,\n      dirExists: fs.existsSync(logsDir),\n      webhookData: webhookData\n    }\n  }\n}];"
      },
      "id": "read-logs",
      "name": "Read Logs from Files",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [560, 240]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {
          "responseHeaders": {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization"
          }
        }
      },
      "id": "response",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [780, 240]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Read Logs from Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Logs from Files": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
} 