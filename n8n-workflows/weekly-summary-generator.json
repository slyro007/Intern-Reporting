{
  "name": "Weekly Summary Generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-weekly-summary",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [280, 300],
      "webhookId": "generate-weekly-summary"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "fieldsToEdit": {
          "values": [
            {
              "fieldName": "mockData",
              "fieldValue": "true"
            },
            {
              "fieldName": "dataSource",
              "fieldValue": "Since file reading isn't available, using execution history data"
            },
            {
              "fieldName": "note",
              "fieldValue": "In production, this would read from /data/logs/ directory"
            }
          ]
        }
      },
      "id": "prepare-data",
      "name": "Prepare Log Data",
      "type": "n8n-nodes-base.editFields",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "jsCode": "// Since we can't read actual log files, we'll create sample data for the AI\n// In production, this would process real log files from /data/logs/\n\nconst weekAgo = new Date();\nweekAgo.setDate(weekAgo.getDate() - 7);\n\n// Mock weekly data structure for AI processing\nconst mockWeeklyData = {\n  'srujan@wolfflogics.com': {\n    userName: 'Srujan Jalagam',\n    userEmail: 'srujan@wolfflogics.com',\n    totalHours: 35,\n    totalDays: 5,\n    logs: [\n      {\n        date: '2024-01-15',\n        hours: '8',\n        description: 'Computer setup and immy.bot configuration',\n        tasks: 'Deployed 5 workstations, configured AD policies',\n        challenges: 'Network connectivity issues with one machine',\n        notes: 'Need to follow up on driver updates'\n      },\n      {\n        date: '2024-01-16', \n        hours: '7',\n        description: 'Client site deployment',\n        tasks: 'Installed software packages, user training',\n        challenges: 'Legacy software compatibility',\n        notes: 'Documented workaround procedures'\n      }\n    ]\n  }\n};\n\nreturn [{\n  json: {\n    weekEndDate: new Date().toISOString().split('T')[0],\n    weekStartDate: weekAgo.toISOString().split('T')[0],\n    userData: mockWeeklyData,\n    dataType: 'mock',\n    note: 'Replace this with actual log file reading in production'\n  }\n}];"
      },
      "id": "process-weekly-data",
      "name": "Process Weekly Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [720, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an AI assistant helping generate professional weekly progress summaries for Wolff Logics MSP interns. Create detailed, well-structured summaries that highlight accomplishments, challenges, and growth."
            },
            {
              "role": "user",
              "content": "=Please generate a comprehensive weekly summary report for the week of {{ $json.weekStartDate }} to {{ $json.weekEndDate }}.\n\nHere is the data for each team member:\n\n{{ Object.keys($json.userData).map(email => {\n  const user = $json.userData[email];\n  return `**${user.userName}** (${user.userEmail}):\n- Total Hours: ${user.totalHours}\n- Days Active: ${user.totalDays}\n- Daily Logs:\n${user.logs.map(log => \n  `  â€¢ ${log.date} (${log.hours}h): ${log.description}\\n    Tasks: ${log.tasks}\\n    Challenges: ${log.challenges}\\n    Notes: ${log.notes}`\n).join('\\n')}`;\n}).join('\\n\\n') }}\n\nPlease format the summary as a professional report with:\n1. Executive Summary\n2. Individual Progress by Team Member\n3. Key Accomplishments\n4. Challenges and Solutions\n5. Recommendations for Next Week\n\nUse markdown formatting for headers and structure."
            }
          ]
        },
        "options": {}
      },
      "id": "generate-ai-summary",
      "name": "Generate AI Summary",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [940, 300],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $json.choices[0].message.content;\nconst weekEndDate = $('Process Weekly Data').first().json.weekEndDate;\nconst fileName = `weekly-summary-${weekEndDate}.md`;\n\nreturn [{\n  json: {\n    fileName: fileName,\n    content: aiResponse,\n    weekEndDate: weekEndDate,\n    savedTo: '/data/summaries/',\n    fullPath: `/data/summaries/${fileName}`\n  }\n}];"
      },
      "id": "format-summary",
      "name": "Format Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1160, 300]
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "fieldsToEdit": {
          "values": [
            {
              "fieldName": "status",
              "fieldValue": "generated"
            },
            {
              "fieldName": "message",
              "fieldValue": "Weekly summary generated successfully"
            },
            {
              "fieldName": "generatedAt",
              "fieldValue": "={{ new Date().toISOString() }}"
            },
            {
              "fieldName": "fileNote",
              "fieldValue": "In production, this would save to /data/summaries/"
            }
          ]
        }
      },
      "id": "mark-generated",
      "name": "Mark as Generated",
      "type": "n8n-nodes-base.editFields",
      "typeVersion": 1,
      "position": [1380, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"Weekly summary generated successfully\",\n  \"fileName\": \"{{ $json.fileName }}\",\n  \"weekEndDate\": \"{{ $json.weekEndDate }}\",\n  \"content\": \"{{ $json.content }}\"\n}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1600, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Prepare Log Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Log Data": {
      "main": [
        [
          {
            "node": "Process Weekly Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Weekly Data": {
      "main": [
        [
          {
            "node": "Generate AI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary": {
      "main": [
        [
          {
            "node": "Format Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Summary": {
      "main": [
        [
          {
            "node": "Mark as Generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Generated": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Chicago"
  },
  "createdAt": "2024-01-01T00:00:00.000Z",
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "2"
} 